// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Schemas below
model User {
  username       String          @id @unique
  email          String          @unique
  password       String
  dateRegistered DateTime        @default(now())
  posts          Post[] // One-to-many with Post
  postComments   PostComment[]
  reviews        Review[] // One-to-many with Review
  reviewComments ReviewComment[]
  // Use a many-to-many self relation for following (both following and followedBy are necessary)
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
  following      User[]          @relation("UserFollows")
  followedBy     User[]          @relation("UserFollows")
}

model Post {
  id             Int           @id @default(autoincrement())
  content        String
  authorUsername String
  author         User          @relation(fields: [authorUsername], references: [username])
  datePublished  DateTime      @default(now())
  comments       PostComment[]
}

model PostComment {
  id             Int      @id @default(autoincrement())
  content        String
  authorUsername String
  author         User     @relation(fields: [authorUsername], references: [username])
  datePublished  DateTime @default(now())
  postId         Int
  post           Post     @relation(fields: [postId], references: [id])
}

// For saving albums that have been reviewed.
// Allows us to not have to call the Spotify API again for these albums.
model Album {
  spotifyId String   @id
  name      String
  genres    Json // A list of genres (MySQL doesn't support lists, so we use JSON)
  artists   Json
  imageUrl  String
  reviews   Review[]
}

model Review {
  id             Int             @id @default(autoincrement())
  albumId        String
  album          Album           @relation(fields: [albumId], references: [spotifyId])
  content        String
  rating         Int
  authorUsername String
  author         User            @relation(fields: [authorUsername], references: [username])
  datePublished  DateTime        @default(now())
  comments       ReviewComment[]
}

model ReviewComment {
  id             Int      @id @default(autoincrement())
  content        String
  authorUsername String
  author         User     @relation(fields: [authorUsername], references: [username])
  datePublished  DateTime @default(now())
  reviewId       Int
  review         Review   @relation(fields: [reviewId], references: [id])
}
