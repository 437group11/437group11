// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  posts          Post[] // One-to-many with Post
  postComments   PostComment[]
  reviews        Review[] // One-to-many with Review
  reviewComments ReviewComment[]
  // Use a many-to-many self relation for following (both following and followedBy are necessary)
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
  following      User[]          @relation("UserFollows")
  followedBy     User[]          @relation("UserFollows")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            Int           @id @default(autoincrement())
  content       String
  authorId      String
  author        User          @relation(fields: [authorId], references: [id])
  datePublished DateTime      @default(now())
  comments      PostComment[]
}

model PostComment {
  id            Int      @id @default(autoincrement())
  content       String
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  datePublished DateTime @default(now())
  postId        Int
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// For saving albums that have been reviewed.
// Allows us to not have to call the Spotify API again for these albums.
model Album {
  spotifyId String   @id
  name      String
  genres    Json // A list of genres (MySQL doesn't support lists, so we use JSON)
  artists   Json
  imageUrl  String
  reviews   Review[]
}

model Review {
  id            Int             @id @default(autoincrement())
  albumId       String
  album         Album           @relation(fields: [albumId], references: [spotifyId])
  content       String
  rating        Int
  authorId      String
  author        User            @relation(fields: [authorId], references: [id])
  datePublished DateTime        @default(now())
  comments      ReviewComment[]
}

model ReviewComment {
  id            Int      @id @default(autoincrement())
  content       String
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  datePublished DateTime @default(now())
  reviewId      Int
  review        Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}
